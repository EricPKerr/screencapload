#!/usr/bin/env ruby
#
# screencapload
# Clement Joubert / @czj
#
# Captures a portion of your OSX screen from the command line,
# uploads it to imgur, drops it into your clipboard.
# 
# It uses the imgur XML v2 API and allows up to 100 uploads per hour
#
# Example:
#
#   screencapload [imgur_api_key]
#
# Passing imgur API key is optionnal if you have set your imgur
# credentials in ~/.imgur as a simple file of :
#
#   <api_key_value>
#
# 
# Optionnal : install graphicsmagick with homebrew
# 
#   brew install graphicsmagick
# 
# On OSX Lion (november 2011) you might need this line to install :
# sudo easy_install Mercurial ; brew install --use-gcc --HEAD graphicsmagick
# 
# GraphicsMagick is a faster implementation of ImageMagick
# It allows us to trim the image's border :
# 
#   Before : http://i.imgur.com/5DFYN.png 
#   After : http://i.imgur.com/YKK1F.png
# 
# 
# Optionnal : install optipng / pngcrush with homebrew :
# 
#   brew install optipng
# 
# OptiPNG is an open source program that use optimized deflate compression
# algorithms to re-compress PNG files. It is a lot faster than PNGOUT (closed source)
# even though it doesn't save as much bytes.

config_file = "#{ENV['HOME']}/.imgur"

if not ARGV[0].nil?
  api_key = ARGV[0]
elsif File.exists?(config_file)
  api_key = File.read(config_file).strip
else
  puts "Usage: screencapload [imgur_api_key]"
  puts "You can also type your imgur api key in ~/.imgur"
  exit!(1)
end

tempfile = "/tmp/screenshot-#{Time.now.to_f}.png"

# Take a screenshot on OSX
# -x = don not play sounds
# -i = capture interactively (via mouse, or press space to toggle full window capture)
`/usr/sbin/screencapture -x -i '#{tempfile}'`

# We use the default trimming of GraphicsMagick (1%)
if File.exists?(gm = "/usr/local/bin/gm")
  trimmed_tempfile = "/tmp/screenshot-trim-#{Time.now.to_f}.png"
  puts "Trimming screen capture edges ..."
  `#{gm} convert "#{tempfile}" -trim "#{trimmed_tempfile}" && mv "#{trimmed_tempfile}" "#{tempfile}"`
end

# We use optipng with default compression setting (-o2). It requires a
# fraction of a second to recompress and save 5 to 30 %.
# You can use -o3 too but it will add nearly a second to the whole process.
if File.exists?(optipng = "/usr/local/bin/optipng")
  puts "Optimizing PNG compression ..."
  `#{optipng} "#{tempfile}"`
end

# Check that the screenshot was actually captured, exit if not
unless File.exists?(tempfile)
  puts "Impossible to get screen capture."
  exit!(1)
end

# Upload it to imgur.com
# CURL uses -F/--form to specify HTTP multipart POST data
# CURL uses -X/--request to request command to use
puts "Uploading screen capture ..."

# We use XML API instead of JSON because XML parsing is built in Ruby
# JSON requires users to install json gem system wide
require "rexml/document"
response = `curl --silent -X POST -F 'image=@#{tempfile}' -F 'key=#{api_key}' 'http://api.imgur.com/2/upload.xml'`
`rm #{tempfile}`

# Parse response and get original image url from XML
url = REXML::Document.new(response).root.elements['links'].elements['original'].text

# Let's be verbose
puts "Uploaded screen capture to #{url}"

# Copy original image url to clipboard and play an upload complete sound
# (Yoann Jean added a bang! for some Steeve Jobs emotion !)
`printf "#{url}" | pbcopy && osascript -e 'Say "Boom!"'`